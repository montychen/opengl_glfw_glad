[[https://webgpu.io/][WebGPU]]不但可以用于Web，作为WebGL后续发展的替代。它还可以用于原生平台，而且跨平台。相较于Metal和DX12，WebGPU的API和Vulkan的相似度最高。
- 谷歌和Mozilla合作，定义了一个用于原生平台的c接口 [[https://github.com/webgpu-native/webgpu-headers][webgpu.h]]，并同时给出了各自的实现。
- [[https://github.com/gfx-rs/wgpu][wgpu]] Mozilla的原生实现。firefox上的WebGPU实现，就是用这个wgpu来实现的。
- [[https://dawn.googlesource.com/dawn][dawn]] 谷歌的原生实现，Chrome的WebGPU实现，也是用dawn来实现的。

  #+begin_quote
  WebGPU规范副主席 Corentin Wallez， 他也是谷歌WebGUP实现小组的Leader，在19年DevFest上有个油管的视频介绍WebGPU不错：[[https://www.youtube.com/watch?v=EhWvqaRDz5s&list=LLDobcIfc2f6biSPC36-iQOg&index=2&t=0s][WebGPU: Next-generation 3D graphics on the web (DevFest 2019)]]
  #+end_quote



*背面剔除Backface Culling* : 背面剔除，就是早点丢弃那些被遮挡、观察者看不见背面，提供渲染速度。
- 当我们观察场景中对象时，一般只能以一定角度来观察，那么对象的某些面我们是看不到的，例如观察一个立方体，最多只能同时看到3个面，有时只能看到1个面，而绘制时如果不采取剔除背面的措施，则要绘制6个面，其中包括一些，我们根本看不到的面。开启背面剔除则能明显改善渲染性能。
- 视锥剔除Frustum Culling非常的快(如果算法好的话)，而且是在渲染管线(Rendering Pipeline)之前进行的，不像背面剔除Backface Culling那样需要在渲染管线之后一个顶点一个顶点地计算。对于被剪裁掉的物体绘图引擎都不会将其送入显卡，因此视锥剔除对渲染速度有巨大的改善,毕竟什么都不渲染是最快的渲染.
- 哪个面是 *正面FrontFace或者背面Backface* ？是根据观察者的观察方向，使用顶点绕序(winding order)的方向来确定：从观察者看向屏幕的三角形， 默认的正面是以逆时针的顺序定义 三角形顶点（wgpu::FrontFace::Ccw）。 想要剔除背面就是（wgpu::CullMode::Back）
  - ccw: counterclockwise 逆时针
  - cw: clockwise 顺时针
    #+ATTR_latex: :width 650   #+ATTR_HTML: :width 650  #+ATTR_ORG: :width 650
    [[file:WebGPU/winding_order.jpg]]
