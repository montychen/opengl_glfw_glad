* 入门
** OpenGL
   - 早期的OpenGL使用 *立即渲染模式* （Immediate mode，也就是固定渲染管线），这个模式下绘制图形很方便。OpenGL的大多数功能都被库隐藏起来，开发者很少能控制OpenGL如何进行计算的自由。
   - *立即渲染模式* 确实容易使用和理解，但是效率太低。因此从OpenGL3.2开始，规范文档开始废弃立即渲染模式，并鼓励开发者在OpenGL的 *核心模式* ( *Core-profile* )下进行开发，3.3分支的规范完全移除了旧的特性。后续OpenGL的更高的版本都是在3.3的基础上，引入了额外的功能，并没有改动核心架构。
   -
   #+begin_src c++
   // 明确告诉GLFW我们使用的是核心模式(Core-profile
   glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
   #+end_src
   - 当使用OpenGL的核心模式时，OpenGL迫使我们使用现代的函数。当我们试图使用一个已废弃的函数时，OpenGL会抛出一个错误并终止绘图。现代函数要求使用者真正理解OpenGL和图形编程，它有一些难度，然而提供了更多的灵活性，更高的效率，更重要的是可以更深入的理解图形编程。

** 状态机
   - OpenGL自身是一个巨大的 *状态机(State Machine)* ：一系列的变量描述OpenGL此刻应当如何运行。OpenGL的状态通常被称为 *上下文(Context)* 。我们通常使用如下途径去更改OpenGL状态：设置选项，操作缓冲。最后，我们使用当前OpenGL上下文来渲染。假设当我们想告诉OpenGL去画线段而不是三角形的时候，我们通过改变一些上下文变量来改变OpenGL状态，从而告诉OpenGL如何去绘图。一旦我们改变了OpenGL的状态为绘制线段，下一个绘制命令就会画出线段而不是三角形。
   - 在OpenGL中一个 *Object对象* 是指一些选项的集合，它代表OpenGL状态的一个子集。比如，我们可以用一个对象来代表绘图窗口的设置，之后我们就可以设置它的大小、支持的颜色位数等等。可以把对象看做一个C风格的结构体Struct。
   #+begin_src c++
   // 创建 *对象* , 然后用一个id保存它的引用
   unsigned int objectId = 0;
   glGenObject(1, &objectId);

   // 将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成GL_WINDOW_TARGET）
   glBindObject(GL_WINDOW_TARGET, objectId);

   // 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项
   glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, 800);
   glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, 600);

   // 将目标位置的对象id设回0，解绑这个对象。将上下文对象设回默认.
   // 设置的选项将被保存在objectId所引用的对象中，一旦我们重新绑定这个对象到GL_WINDOW_TARGET位置，这些选项就会重新生效。
   glBindObject(GL_WINDOW_TARGET, 0);
   #+end_src
   - 使用对象的一个好处是在程序中，我们不止可以定义一个对象，并设置它们的选项，每个对象都可以是不同的设置。在我们执行一个使用OpenGL状态的操作的时候，只需要绑定含有需要的设置的对象即可。比如说我们有一些作为3D模型数据（一栋房子或一个人物）的容器对象，在我们想绘制其中任何一个模型的时候，只需绑定一个包含对应模型数据的对象就可以了（当然，我们需要先创建并设置对象的选项）。
